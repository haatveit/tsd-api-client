#!/bin env python

"""API client for admin."""

import click

from tsdapiclient.administrator import do_signup, do_confirm, \
        get_api_key, del_api_key, pw_reset
from tsdapiclient.config import ENV
from tsdapiclient.configurer import read_config, update_config, print_config
from tsdapiclient.tools import _check_present


def print_admin_guide():
    guide_text = """\

        tacl admin
        ~~~~~~~~~~

        If you want to interact with the test API add: '--env test' to
        your command.

        1. Register tacl for non-interactive use
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        By default, tacl can be used with TSD credentials in an interactive
        way. If you want to script your uploads with tacl follow this
        procedure:

        tacl --pnum p11 --signup --client_name '<name>' --email '<email>'
        # email tsd-drift@usit.uio.no, asking for your confirmation token
        tacl --pnum p11 --confirm <confirmation_token>
        # email tsd-drift@usit.uio.no, asking for verification
        tacl --pnum p11 --getapikey

        2. Register a 3rd-party app with the API
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        Follow the same steps as in #1.
        To view your credentials do: tacl --show_config

        3. Manage your config
        ~~~~~~~~~~~~~~~~~~~~~
        tacl --pnum p11 --delapikey <key>
        tacl --pnum p11 --pwreset
        tacl --show_config
        tacl --del_config

        4. API docs
        ~~~~~~~~~~~
        test.api.tsd.usit.no/v1/docs/tsd-api-integration.html

    """
    print guide_text


@click.command()
@click.option('--env', default='prod', help='which environment you want to interact with')
@click.option('--pnum', default=None, help='project numbers')
@click.option('--signup', is_flag=True, default=False, help='register an API client')
@click.option('--confirm', default=None, help='confirmation token')
@click.option('--getapikey', is_flag=True, default=False, help='get a persistent API key')
@click.option('--delapikey', default=False, help='revoke an API key')
@click.option('--pwreset', is_flag=True, default=False, help='reset your password')
@click.option('--guide', is_flag=True, default=False, help='print help text')
@click.option('--client_name', default=None, help='your client\'s name')
@click.option('--email', default=None, help='your email address')
@click.option('--show_config', is_flag=True, help='print current tacl config')
@click.option('--del_config', is_flag=True, help='delete current tacl config')
def main(env, pnum, signup, confirm, getapikey, delapikey, pwreset, guide,
         client_name, email, show_config, del_config):
    if guide:
        print_admin_guide()
        return
    if show_config:
        print_config()
        return
    if del_config:
        delete_config()
        return
    if env not in ['test', 'prod']:
        print 'unknown env'
        sys.exit(1)
    _check_present(env, 'env')
    _check_present(pnum, 'pnum')
    if signup:
        _check_present(client_name, 'client_name')
        _check_present(email, 'email')
        resp = do_signup(env, pnum, client_name, email)
        if not resp:
            print 'Error in signup'
            return
        update_config(env, 'client_name', client_name)
        update_config(env, 'email', email)
        update_config(env, 'client_id', resp['client_id'])
        print 'client registered with client_id: %s' % resp['client_id']
        return
    if confirm is not None:
        conf = read_config()[env]
        resp = do_confirm(env, pnum, conf['client_id'], confirm)
        if not resp:
            print 'Error in confirmation'
            return
        update_config(env, 'pass', resp['pass'])
        print 'client confirmed, password stored in tacl config'
        return
    if getapikey:
        conf = read_config()[env]
        resp = get_api_key(env, pnum, conf['client_id'], conf['pass'])
        if not resp:
            print 'Error getting API key'
            return
        update_config(env, 'api_key', resp['api_key'])
        print 'API key stored in config'
        return
    if delapikey:
        conf = read_config()[env]
        resp = del_api_key(env, pnum, conf['client_id'], conf['pass'], delapikey)
        # TODO inspect response
        print 'API key deleted'
        return
    if pwreset:
        conf = read_config()[env]
        resp = pw_reset(env, pnum, conf['client_id'], conf['pass'])
        if not resp:
            print 'Error in password reset'
            return
        update_config(env, 'pass', resp['pass'])
        print 'new password stored in tacl config'
        return


if __name__ == '__main__':
    main()
