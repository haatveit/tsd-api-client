#!/bin env python

"""API client for admin."""

import click

from tsdapiclient.administrator import do_signup, do_confirm, \
        get_api_key, del_api_key, pw_reset
from tsdapiclient.config import ENV
from tsdapiclient.configurer import read_config
from tsdapiclient.tools import _check_present


def print_admin_guide():
    guide_text = """\

        TSD API client command-line tool: tacl
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        Usage: tacl [OPTIONS]

        Registration
        ~~~~~~~~~~~~

        Suppose you want to register for p11 in test:

        tacl --pnum p11 --signup --client_name '<name>' --email '<email>'
        # returns a client_id
        # get your confirmation token in email
        # save this in a config file:
        # client_id: '<id>'
        # confirmation_token: '<token>'

        tacl --pnum p11 --config <file> --confirm
        # returns a password
        # ask for your client to be verified
        # add this to the config file
        # pass: '<pw>'

        tacl --pnum p11 --config <file> --getapikey
        # returns an API key
        # save this in the config file
        # api_key: <key>

        Management
        ~~~~~~~~~~
        tacl --pnum p11 --config <file> --delapikey '<key>'
        tacl --pnum p11 --config <file> --pwreset

        API docs
        ~~~~~~~~
        test.api.tsd.usit.no/v1/docs/tsd-api-integration.html

    """
    print guide_text


@click.command()
@click.option('--env', default='test', help='which environment you want to interact with')
@click.option('--pnum', default=None, help='project numbers')
@click.option('--signup', is_flag=True, default=False, help='register an API client')
@click.option('--confirm', is_flag=True, default=False, help='confirm your details')
@click.option('--getapikey', is_flag=True, default=False, help='get a persistent API key')
@click.option('--delapikey', default=False, help='revoke an API key')
@click.option('--pwreset', is_flag=True, default=False, help='reset your password')
@click.option('--guide', is_flag=True, default=False, help='print help text')
@click.option('--client_name', default=None, help='your client\'s name')
@click.option('--email', default=None, help='your email address')
@click.option('--config', default=None, help='path to config file')
def main(env, pnum, signup, confirm, getapikey, delapikey, pwreset, guide,
         client_name, email, config):
    if guide:
        print_admin_guide()
        return
    # TODO: set prod as default
    if env not in ['test', 'prod']:
        print 'unknown env'
        sys.exit(1)
    _check_present(env, 'env')
    _check_present(pnum, 'pnum')
    # TODO: create config file automatically
    if signup:
        _check_present(client_name, 'client_name')
        _check_present(email, 'email')
        print do_signup(env, pnum, client_name, email)
        return
    if confirm:
        _check_present(client_id, 'client_id')
        _check_present(config, 'config')
        conf = read_config(config)
        print do_confirm(env, pnum, conf['client_id'], conf['confirmation_token'])
        return
    if getapikey:
        _check_present(config, 'config')
        conf = read_config(config)
        print get_api_key(env, pnum, conf['client_id'], conf['pass'])
    if delapikey:
        _check_present(config, 'config')
        conf = read_config(config)
        print del_api_key(env, pnum, conf['client_id'], conf['pass'], delapikey)
        return
    if pwreset:
        _check_present(config, 'config')
        conf = read_config(config)
        print pw_reset(env, pnum, conf['client_id'], conf['pass'])
        return


if __name__ == '__main__':
    main()
